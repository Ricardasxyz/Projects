{"version":3,"sources":["components/SearchBar.js","App.js","serviceWorker.js","index.js","images/git.png"],"names":["SearchBar","handleSubmit","handleChange","val","onSubmit","value","className","placeholder","type","onChange","user","click","App","props","e","a","async","preventDefault","fetch","api_call","json","data","setState","name","login","imgGith","avatar_url","bio","inputVal","bind","state","userData","event","this","target","style","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","display","color","src","Git","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6OAiBeA,EAfG,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,IAC/C,OACE,0BAAMC,SAAUH,GACd,2BACEI,MAAOF,EACPG,UAAU,eACVC,YAAY,oBACZC,KAAK,OACLC,SAAUP,IAEZ,4BAAQI,UAAU,2BAAlB,c,gBCPFI,EAAO,GACPC,EAAQ,EA4FGC,E,YA1Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAiBRZ,aAAe,SAAMa,GAAN,iBAAAC,EAAAC,OAAA,uDACbL,IACAG,EAAEG,iBAFW,WAAAF,EAAA,MAGUG,MAAM,gCAAD,OAAiCR,KAHhD,cAGPS,EAHO,kBAAAJ,EAAA,MAIMI,EAASC,QAJf,OAIPC,EAJO,OAKb,EAAKC,SAAS,CACZC,KAAMF,EAAKG,MACXC,QAASJ,EAAKK,WACdC,IAAKN,EAAKM,IACVC,SAAU,KATC,sCAhBb,EAAK1B,aAAe,EAAKA,aAAa2B,KAAlB,gBACpB,EAAKC,MAAQ,CACXC,SAAU,GACVR,KAAM,GACNI,IAAK,GACLC,SAAU,IAPK,E,0EAWNI,GACXC,KAAKX,SAAS,CACZM,SAAUI,EAAME,OAAO7B,QAEzBK,EAAOsB,EAAME,OAAO7B,Q,+BAiBpB,OACE,yBACE8B,MAAO,CACLC,gBAAgB,gJAChBC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,YAClBC,QAAS,OACT,kBAAmB,SACnB,cAAe,SACf,iBAAkB,UAEpBlC,UAAU,iBAEV,wBAAI6B,MAAO,CAAEM,MAAO,UAApB,WACU,yBAAKnC,UAAU,WAAWoC,IAAKC,MADzC,SAGA,kBAAC,EAAD,CACExC,IAAK8B,KAAKH,MAAMF,SAChB3B,aAAcgC,KAAKhC,aACnBC,aAAc+B,KAAK/B,eAGrB,yBAAKI,UAAU,QACb,wBAAIA,UAAU,UAAd,WACA,wBAAIA,UAAU,mBACF,GAATK,EACC,wBACwB,MAAtBsB,KAAKH,MAAML,QACb,mCAEA,yBAAKnB,UAAU,aAAaoC,IAAKT,KAAKH,MAAML,WAIhD,wBAAInB,UAAU,UAAd,QACA,wBAAIA,UAAU,mBACF,GAATK,EACG,wBACmB,MAAnBsB,KAAKH,MAAMP,KACX,gCACAU,KAAKH,MAAMP,MAGjB,wBAAIjB,UAAU,UAAd,OACA,wBAAIA,UAAU,sBACF,GAATK,EACG,wBACkB,MAAlBsB,KAAKH,MAAMH,IACX,+BACAM,KAAKH,MAAMH,W,GAnFTiB,IAAMC,W,MCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,sCErInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.a36ad644.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SearchBar = ({ handleSubmit, handleChange, val }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        value={val}\r\n        className=\"b pa3 ma1 tc\"\r\n        placeholder=\"Enter random name\"\r\n        type=\"text\"\r\n        onChange={handleChange}\r\n      />\r\n      <button className=\"btnFetch  grow pointer \">Click me</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar\";\nimport Git from \"./images/git.png\";\n\nlet user = \"\";\nlet click = 0;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      userData: [],\n      name: \"\",\n      bio: \"\",\n      inputVal: \"\"\n    };\n  }\n\n  handleChange(event) {\n    this.setState({\n      inputVal: event.target.value\n    });\n    user = event.target.value;\n  }\n\n  handleSubmit = async e => {\n    click++;\n    e.preventDefault();\n    const api_call = await fetch(`https://api.github.com/users/${user}`);\n    const data = await api_call.json();\n    this.setState({\n      name: data.login,\n      imgGith: data.avatar_url,\n      bio: data.bio,\n      inputVal: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          backgroundImage: `url('https://images.unsplash.com/photo-1533908279087-2448f4554f18?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80')`,\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\",\n          backgroundRepeat: \"no-repeat\",\n          display: \"flex\",\n          \"justify-content\": \"center\",\n          \"align-items\": \"center\",\n          \"flex-direction\": \"column\"\n        }}\n        className=\"vh-100  w-100\"\n      >\n        <h1 style={{ color: \"white\" }}>\n          Get GIT <img className=\"gitImage\" src={Git} /> User\n        </h1>\n        <SearchBar\n          val={this.state.inputVal}\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n        />\n\n        <div className=\"card\">\n          <h1 className=\"f3 mb2\">Profile</h1>\n          <h2 className=\"f5 fw4 gray mt0\">\n            {click == 0 ? (\n              \"Waiting for more info\"\n            ) : this.state.imgGith == null ? (\n              \"There is no profile for this one\"\n            ) : (\n              <img className=\"fetchedImg\" src={this.state.imgGith} />\n            )}\n          </h2>\n\n          <h1 className=\"f3 mb2\">Name</h1>\n          <h2 className=\"f5 fw4 gray mt0\">\n            {click == 0\n              ? \"Waiting for more info\"\n              : this.state.name == null\n              ? \"There is no name for this one\"\n              : this.state.name}\n          </h2>\n\n          <h1 className=\"f3 mb2\">Bio</h1>\n          <h2 className=\"f5 fw4 gray mt0 tc\">\n            {click == 0\n              ? \"Waiting for more info\"\n              : this.state.bio == null\n              ? \"There is no bio for this one\"\n              : this.state.bio}\n          </h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/git.5cd9f30e.png\";"],"sourceRoot":""}