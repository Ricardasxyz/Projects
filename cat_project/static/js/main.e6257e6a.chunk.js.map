{"version":3,"sources":["pages/Intro.js","pages/components/DisplayBreeds.js","pages/components/RandomImg.js","pages/CatPage.js","App.js","serviceWorker.js","index.js"],"names":["Intro","useState","loggedIn","inputValue","errorMessage","inputVal","setInputVal","value","className","style","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","onSubmit","e","preventDefault","alert","type","onChange","target","placeholder","to","DisplayBreeds","breeds","slice","map","breed","key","id","href","wikipedia_url","name","description","RandomImage","randomImage","setRandomImage","useEffect","axios","get","then","res","data","url","catch","err","console","log","height","alt","src","CatPage","setBreeds","on","toggleBreeds","setToggleBreeds","randomImg","setRandomImg","onClick","title","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6257e6a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Intro() {\r\n  let [inputVal, setInputVal] = useState({\r\n    loggedIn: false,\r\n    inputValue: \"\",\r\n    errorMessage: null\r\n  });\r\n\r\n  let value = \"\";\r\n\r\n  let checkAccess = e => {\r\n    e.preventDefault();\r\n    setInputVal({ inputValue: value });\r\n    if (value === \"Cat\") {\r\n      setInputVal({ loggedIn: true, errorMessage: false });\r\n    } else if (value !== \"Cat\") {\r\n      setInputVal({ errorMessage: true });\r\n    } else {\r\n      alert(\"try again\");\r\n    }\r\n  };\r\n\r\n  let changeSubmit = e => {\r\n    value = e.target.value;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"o-90\"\r\n      style={{\r\n        backgroundImage:\r\n          \"url(\" +\r\n          \"https://images.unsplash.com/photo-1517429481096-5bc77134f77c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2000&q=80\" +\r\n          \")\",\r\n        backgroundPosition: \"center\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\"\r\n      }}\r\n    >\r\n      <div className=\"vh-100 dt w-100\">\r\n        <div className=\"dtc v-mid tc black ph3 ph4-l\">\r\n          {inputVal.errorMessage ? (\r\n            <h1 className=\"f1 lh-title white o-90\">Try again :) </h1>\r\n          ) : inputVal.errorMessage === false && inputVal.loggedIn === true ? (\r\n            <h1 className=\"f1 lh-title white o-90\">Great!</h1>\r\n          ) : (\r\n            <h1 className=\"f1 lh-title white o-90\">Welcome! Enter below:</h1>\r\n          )}\r\n          <form onSubmit={checkAccess}>\r\n            <input\r\n              type=\"text\"\r\n              className=\" o-90 b ba b--black-20 pa2 mb2 \"\r\n              onChange={changeSubmit}\r\n              placeholder=\"Enter 'Cat'\"\r\n            />\r\n            {inputVal.loggedIn ? (\r\n              <div>\r\n                <Link to=\"/catpage\">\r\n                  <button className=\"btnStyle\">Great! Click Me!</button>\r\n                </Link>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <button className=\"btnStyle\">Please enter 'Cat'</button>\r\n              </div>\r\n            )}\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Intro;\r\n","import React from \"react\";\r\n\r\nconst DisplayBreeds = ({ breeds }) => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"tc\">More on Breeds</h1>\r\n\r\n      <ul className=\"breedListing\">\r\n        {breeds.slice(0, 10).map(breed => (\r\n          <li className=\"breedListingItem\" key={breed.id}>\r\n            <h3>\r\n              <a className=\"breedListingLink\" href={breed.wikipedia_url}>\r\n                {breed.name}\r\n              </a>\r\n            </h3>\r\n            <p>{breed.description}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default DisplayBreeds;\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nconst RandomImage = () => {\r\n  let [randomImage, setRandomImage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://api.thecatapi.com/v1/images/search?api_key=e3ab5083-28f8-48ba-9df6-1525032f458b`\r\n      )\r\n      .then(res => {\r\n        setRandomImage(res.data[0].url);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"tc\"\r\n      style={{\r\n        height: \"300px\"\r\n      }}\r\n    >\r\n      <img className=\"randomImgStl\" alt=\"A Random cat! \" src={randomImage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomImage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport DisplayBreeds from \"./components/DisplayBreeds.js\";\r\nimport RandomImage from \"./components/RandomImg\";\r\n\r\nconst CatPage = () => {\r\n  const [breeds, setBreeds] = useState([]);\r\n  let [toggleBreeds, setToggleBreeds] = useState({ on: false });\r\n  let [randomImg, setRandomImg] = useState({ on: false });\r\n\r\n  const toggleBreedList = () => {\r\n    setToggleBreeds({ on: !toggleBreeds.on });\r\n  };\r\n\r\n  const randomizeImage = () => {\r\n    setRandomImg({ on: !randomImg.on });\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://api.thecatapi.com/v1/breeds?api_key=e3ab5083-28f8-48ba-9df6-1525032f458b`\r\n      )\r\n      .then(res => {\r\n        console.log(res.data);\r\n        setBreeds(res.data);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <ul className=\"nav\">\r\n        <li onClick={toggleBreedList} className=\"liItem\" href=\"#\" title=\"About\">\r\n          Display Breeds\r\n        </li>\r\n        <li onClick={randomizeImage} className=\"liItem\" href=\"#\" title=\"Store\">\r\n          Random Image\r\n        </li>\r\n      </ul>\r\n\r\n     \r\n      {randomImg.on ? (\r\n        <RandomImage />\r\n      ) : (\r\n        <div>\r\n          <RandomImage />\r\n        </div>\r\n      )}\r\n      {toggleBreeds.on && <DisplayBreeds breeds={breeds} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CatPage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Intro from \"./pages/Intro\";\nimport CatPage from \"./pages/CatPage\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport \"tachyons\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={() => <Intro />} />\n        <Route exact path=\"/catpage\" component={CatPage} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}